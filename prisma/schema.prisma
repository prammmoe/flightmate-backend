// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  phoneNo String @default("6281247016022")
  password String @default("password")
  bookings Booking[] 

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Passenger {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  dateOfBirth DateTime
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Airport {
  id Int @id @default(autoincrement())
  name String 
  city String
  country String
  iataCode String @unique
  icaoCode String @unique
  departures Flight[] @relation("departures")
  arrivals Flight[] @relation("arrivals")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Aircraft {
  id Int @id @default(autoincrement())
  model String
  manufacturer String
  seatingCapacity Int
  flights Flight[]

  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}

model Flight {
  id Int @id @default(autoincrement())
  flightNumber String
  flightClass String @default("Ekonomi")
  departureAirportId Int
  arrivalAirportId Int
  departureTime DateTime
  arrivalTime DateTime
  aircraftId Int
  status FlightStatus
  airlines String
  ticketPrice Int?
  bookings Booking[]
  // flightCrew FlightCrew[]

  departureAirport Airport @relation("departures", fields: [departureAirportId], references: [id])
  arrivalAirport Airport @relation("arrivals", fields: [arrivalAirportId], references: [id])
  aircraft Aircraft @relation(fields: [aircraftId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id Int @id @default(autoincrement())
  userId Int
  passengerId Int
  flightId Int
  bookingDate DateTime
  status BookingStatus
  payment Payment?
  luggageWeight Int @default(20)

  user User @relation(fields: [userId], references: [id])
  passenger Passenger @relation(fields: [passengerId], references: [id])
  flight Flight @relation(fields: [flightId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  paymentCode Int @id @unique @default(10837611)
  bookingId Int @unique
  productName String @default("Tiket Lion Air")
  amount Float
  quantity Int @default(1)
  paymentDate DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FlightStatus {
  SCHEDULED 
  ON_TIME
  DELAYED
  CANCELLED
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  PENDING
}